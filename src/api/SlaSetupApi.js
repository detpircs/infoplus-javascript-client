/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SlaSetup'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SlaSetup'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.SlaSetupApi = factory(root.infoplus.ApiClient, root.infoplus.SlaSetup);
  }
}(this, function(ApiClient, SlaSetup) {
  'use strict';

  /**
   * SlaSetup service.
   * @module api/SlaSetupApi
   * @version beta
   */

  /**
   * Constructs a new SlaSetupApi. 
   * @alias module:api/SlaSetupApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addSlaSetupAudit operation.
     * @callback module:api/SlaSetupApi~addSlaSetupAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a slaSetup
     * Adds an audit to an existing slaSetup.
     * @param {Number} slaSetupId Id of the slaSetup to add an audit to
     * @param {String} slaSetupAudit The audit to add
     * @param {module:api/SlaSetupApi~addSlaSetupAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addSlaSetupAudit = function(slaSetupId, slaSetupAudit, callback) {
      var postBody = null;

      // verify the required parameter 'slaSetupId' is set
      if (slaSetupId === undefined || slaSetupId === null) {
        throw new Error("Missing the required parameter 'slaSetupId' when calling addSlaSetupAudit");
      }

      // verify the required parameter 'slaSetupAudit' is set
      if (slaSetupAudit === undefined || slaSetupAudit === null) {
        throw new Error("Missing the required parameter 'slaSetupAudit' when calling addSlaSetupAudit");
      }


      var pathParams = {
        'slaSetupId': slaSetupId,
        'slaSetupAudit': slaSetupAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/slaSetup/{slaSetupId}/audit/{slaSetupAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addSlaSetupTag operation.
     * @callback module:api/SlaSetupApi~addSlaSetupTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a slaSetup.
     * Adds a tag to an existing slaSetup.
     * @param {Number} slaSetupId Id of the slaSetup to add a tag to
     * @param {String} slaSetupTag The tag to add
     * @param {module:api/SlaSetupApi~addSlaSetupTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addSlaSetupTag = function(slaSetupId, slaSetupTag, callback) {
      var postBody = null;

      // verify the required parameter 'slaSetupId' is set
      if (slaSetupId === undefined || slaSetupId === null) {
        throw new Error("Missing the required parameter 'slaSetupId' when calling addSlaSetupTag");
      }

      // verify the required parameter 'slaSetupTag' is set
      if (slaSetupTag === undefined || slaSetupTag === null) {
        throw new Error("Missing the required parameter 'slaSetupTag' when calling addSlaSetupTag");
      }


      var pathParams = {
        'slaSetupId': slaSetupId,
        'slaSetupTag': slaSetupTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/slaSetup/{slaSetupId}/tag/{slaSetupTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSlaSetupTag operation.
     * @callback module:api/SlaSetupApi~deleteSlaSetupTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a slaSetup.
     * Deletes an existing slaSetup tag using the specified data.
     * @param {Number} slaSetupId Id of the slaSetup to remove tag from
     * @param {String} slaSetupTag The tag to delete
     * @param {module:api/SlaSetupApi~deleteSlaSetupTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSlaSetupTag = function(slaSetupId, slaSetupTag, callback) {
      var postBody = null;

      // verify the required parameter 'slaSetupId' is set
      if (slaSetupId === undefined || slaSetupId === null) {
        throw new Error("Missing the required parameter 'slaSetupId' when calling deleteSlaSetupTag");
      }

      // verify the required parameter 'slaSetupTag' is set
      if (slaSetupTag === undefined || slaSetupTag === null) {
        throw new Error("Missing the required parameter 'slaSetupTag' when calling deleteSlaSetupTag");
      }


      var pathParams = {
        'slaSetupId': slaSetupId,
        'slaSetupTag': slaSetupTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/slaSetup/{slaSetupId}/tag/{slaSetupTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateSlaSetupById operation.
     * @callback module:api/SlaSetupApi~getDuplicateSlaSetupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlaSetup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a slaSetup by id
     * Returns a duplicated slaSetup identified by the specified id.
     * @param {Number} slaSetupId Id of the slaSetup to be duplicated.
     * @param {module:api/SlaSetupApi~getDuplicateSlaSetupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlaSetup}
     */
    this.getDuplicateSlaSetupById = function(slaSetupId, callback) {
      var postBody = null;

      // verify the required parameter 'slaSetupId' is set
      if (slaSetupId === undefined || slaSetupId === null) {
        throw new Error("Missing the required parameter 'slaSetupId' when calling getDuplicateSlaSetupById");
      }


      var pathParams = {
        'slaSetupId': slaSetupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SlaSetup;

      return this.apiClient.callApi(
        '/beta/slaSetup/duplicate/{slaSetupId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSlaSetupByFilter operation.
     * @callback module:api/SlaSetupApi~getSlaSetupByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SlaSetup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search slaSetups by filter
     * Returns the list of slaSetups that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/SlaSetupApi~getSlaSetupByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SlaSetup>}
     */
    this.getSlaSetupByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SlaSetup];

      return this.apiClient.callApi(
        '/beta/slaSetup/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSlaSetupById operation.
     * @callback module:api/SlaSetupApi~getSlaSetupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlaSetup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a slaSetup by id
     * Returns the slaSetup identified by the specified id.
     * @param {Number} slaSetupId Id of the slaSetup to be returned.
     * @param {module:api/SlaSetupApi~getSlaSetupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlaSetup}
     */
    this.getSlaSetupById = function(slaSetupId, callback) {
      var postBody = null;

      // verify the required parameter 'slaSetupId' is set
      if (slaSetupId === undefined || slaSetupId === null) {
        throw new Error("Missing the required parameter 'slaSetupId' when calling getSlaSetupById");
      }


      var pathParams = {
        'slaSetupId': slaSetupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SlaSetup;

      return this.apiClient.callApi(
        '/beta/slaSetup/{slaSetupId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSlaSetupTags operation.
     * @callback module:api/SlaSetupApi~getSlaSetupTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a slaSetup.
     * Get all existing slaSetup tags.
     * @param {Number} slaSetupId Id of the slaSetup to get tags for
     * @param {module:api/SlaSetupApi~getSlaSetupTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSlaSetupTags = function(slaSetupId, callback) {
      var postBody = null;

      // verify the required parameter 'slaSetupId' is set
      if (slaSetupId === undefined || slaSetupId === null) {
        throw new Error("Missing the required parameter 'slaSetupId' when calling getSlaSetupTags");
      }


      var pathParams = {
        'slaSetupId': slaSetupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/slaSetup/{slaSetupId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
