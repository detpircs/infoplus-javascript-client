/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.OmsOrder();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OmsOrder', function() {
    it('should create an instance of OmsOrder', function() {
      // uncomment below and update the code to test OmsOrder
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be.a(infoplus.OmsOrder);
    });

    it('should have the property lobId (base name: "lobId")', function() {
      // uncomment below and update the code to test the property lobId
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property omsOrderNo (base name: "omsOrderNo")', function() {
      // uncomment below and update the code to test the property omsOrderNo
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property orderStatus (base name: "orderStatus")', function() {
      // uncomment below and update the code to test the property orderStatus
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property orderEntryProgramId (base name: "orderEntryProgramId")', function() {
      // uncomment below and update the code to test the property orderEntryProgramId
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property enteredById (base name: "enteredById")', function() {
      // uncomment below and update the code to test the property enteredById
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property createDate (base name: "createDate")', function() {
      // uncomment below and update the code to test the property createDate
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property modifyDate (base name: "modifyDate")', function() {
      // uncomment below and update the code to test the property modifyDate
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property nextOMSOrderId (base name: "nextOMSOrderId")', function() {
      // uncomment below and update the code to test the property nextOMSOrderId
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property customerId (base name: "customerId")', function() {
      // uncomment below and update the code to test the property customerId
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property tax (base name: "tax")', function() {
      // uncomment below and update the code to test the property tax
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property shippingHandling (base name: "shippingHandling")', function() {
      // uncomment below and update the code to test the property shippingHandling
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property shOverrideAmount (base name: "shOverrideAmount")', function() {
      // uncomment below and update the code to test the property shOverrideAmount
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property integrationPartnerId (base name: "integrationPartnerId")', function() {
      // uncomment below and update the code to test the property integrationPartnerId
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property orderSourceId (base name: "orderSourceId")', function() {
      // uncomment below and update the code to test the property orderSourceId
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property batchNo (base name: "batchNo")', function() {
      // uncomment below and update the code to test the property batchNo
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property isGift (base name: "isGift")', function() {
      // uncomment below and update the code to test the property isGift
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property giftMessage (base name: "giftMessage")', function() {
      // uncomment below and update the code to test the property giftMessage
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property emailRecipient (base name: "emailRecipient")', function() {
      // uncomment below and update the code to test the property emailRecipient
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property mailRecipient (base name: "mailRecipient")', function() {
      // uncomment below and update the code to test the property mailRecipient
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property keyCode (base name: "keyCode")', function() {
      // uncomment below and update the code to test the property keyCode
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property keyCodeDescription (base name: "keyCodeDescription")', function() {
      // uncomment below and update the code to test the property keyCodeDescription
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property distCharges (base name: "distCharges")', function() {
      // uncomment below and update the code to test the property distCharges
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property subTotal (base name: "subTotal")', function() {
      // uncomment below and update the code to test the property subTotal
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "customFields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instane = new infoplus.OmsOrder();
      //expect(instance).to.be();
    });

  });

}));
